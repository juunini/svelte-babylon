import{p as x,s as I,r as O}from"./props-CDwtXEPn.js";import{k as g,G as Y,v as b,M as P,y as C,V as h,w as U}from"./create-runtime-stories-D2yFG5at.js";import{p as X,a as _}from"./index-client-0IVJ1HVs.js";function A(e,t){let n=x(t,"mesh",15),a=O(t,["$$slots","$$events","$$legacy","mesh"]);g(e,I({createMeshFunction:Y},()=>a,{get mesh(){return n()},set mesh(l){n(l)}}))}A.__docgen={data:[{name:"mesh",visibility:"public",description:"if you want to use a mesh api, bind it",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"GroundMesh"},static:!1,readonly:!1,defaultValue:"..."},{name:"options",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ width?: number | undefined; height?: number | undefined; subdivisions?: number | undefined; subdivisionsX?: number | undefined; subdivisionsY?: number | undefined; updatable?: boolean | undefined; }"},static:!1,readonly:!1},{name:"scene",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"Scene"},static:!1,readonly:!1},{name:"children",visibility:"public",keywords:[],kind:"let",type:{kind:"function",text:"Snippet<[]>"},static:!1,readonly:!1},{name:"physics",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1},{name:"physicsShape",visibility:"public",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"const",type:"number",value:0,text:"PhysicsShapeType.SPHERE"},{kind:"const",type:"number",value:1,text:"PhysicsShapeType.CAPSULE"},{kind:"const",type:"number",value:2,text:"PhysicsShapeType.CYLINDER"},{kind:"const",type:"number",value:3,text:"PhysicsShapeType.BOX"},{kind:"const",type:"number",value:4,text:"PhysicsShapeType.CONVEX_HULL"},{kind:"const",type:"number",value:5,text:"PhysicsShapeType.CONTAINER"},{kind:"const",type:"number",value:6,text:"PhysicsShapeType.MESH"},{kind:"const",type:"number",value:7,text:"PhysicsShapeType.HEIGHTFIELD"},{kind:"type",type:"object",text:"PhysicsShape"}],text:"PhysicsShapeType.SPHERE | PhysicsShapeType.CAPSULE | PhysicsShapeType.CYLINDER | PhysicsShapeType.BOX | PhysicsShapeType.CONVEX_HULL | PhysicsShapeType.CONTAINER | PhysicsShapeType.MESH | PhysicsShapeType.HEIGHTFIELD | PhysicsShape"},static:!1,readonly:!1},{name:"physicsOptions",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"PhysicsAggregateParameters"},static:!1,readonly:!1},{name:"position",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"rotation",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"scaling",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"force",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"impulse",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"onCollision",visibility:"public",keywords:[],kind:"let",type:{kind:"function",text:"(eventData: IPhysicsCollisionEvent, eventState: EventState) => void"},static:!1,readonly:!1},{name:"onCollisionOnce",visibility:"public",keywords:[],kind:"let",type:{kind:"function",text:"(eventData: IPhysicsCollisionEvent, eventState: EventState) => void"},static:!1,readonly:!1}],name:"Ground.svelte"};function H(e){const t=(e.segments||32)|0,n=e.diameterX||e.diameter||1,a=e.diameterY||e.diameter||1,l=e.diameterZ||e.diameter||1,r=e.arc&&(e.arc<=0||e.arc>1)?1:e.arc||1,m=e.slice&&e.slice<=0?1:e.slice||1,R=e.sideOrientation===0?0:e.sideOrientation||b.DEFAULTSIDE,j=!!e.dedupTopBottomIndices,E=new h(n/2,a/2,l/2),d=2+t,y=2*d,s=[],u=[],k=[],f=[];for(let p=0;p<=d;p++){const T=p/d,D=T*Math.PI*m;for(let o=0;o<=y;o++){const i=o/y,z=i*Math.PI*2*r,N=C.RotationZ(-D),V=C.RotationY(z),M=h.TransformCoordinates(h.Up(),N),w=h.TransformCoordinates(M,V),S=w.multiply(E),v=w.divide(E).normalize();u.push(S.x,S.y,S.z),k.push(v.x,v.y,v.z),f.push(i,T)}if(p>0){const o=u.length/3;for(let i=o-2*(y+1);i+y+2<o;i++)j?(p>1&&(s.push(i),s.push(i+1),s.push(i+y+1)),(p<d||m<1)&&(s.push(i+y+1),s.push(i+1),s.push(i+y+2))):(s.push(i),s.push(i+1),s.push(i+y+1),s.push(i+y+1),s.push(i+1),s.push(i+y+2))}}b._ComputeSides(R,u,s,k,f,e.frontUVs,e.backUVs);const c=new b;return c.indices=s,c.positions=u,c.normals=k,c.uvs=f,c}function L(e,t={},n=null){const a=new P(e,n);return t.sideOrientation=P._GetDefaultSideOrientation(t.sideOrientation),a._originalBuilderSideOrientation=t.sideOrientation,H(t).applyToMesh(a,t.updatable),a}b.CreateSphere=H;P.CreateSphere=(e,t,n,a,l,r)=>L(e,{segments:t,diameterX:n,diameterY:n,diameterZ:n,sideOrientation:r,updatable:l},a);function G(e,t){X(t,!0);let n=x(t,"mesh",15),a=x(t,"physicsShape",19,()=>U.SPHERE),l=O(t,["$$slots","$$events","$$legacy","mesh","physicsShape"]);g(e,I({createMeshFunction:L,get physicsShape(){return a()}},()=>l,{get mesh(){return n()},set mesh(r){n(r)}})),_()}G.__docgen={data:[{name:"options",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ arc?: number | undefined; backUVs?: Vector4 | undefined; diameter?: number | undefined; diameterX?: number | undefined; diameterY?: number | undefined; diameterZ?: number | undefined; ... 4 more ...; updatable?: boolean | undefined; }"},static:!1,readonly:!1},{name:"scene",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"Scene"},static:!1,readonly:!1},{name:"children",visibility:"public",keywords:[],kind:"let",type:{kind:"function",text:"Snippet<[]>"},static:!1,readonly:!1},{name:"mesh",visibility:"public",description:"if you want to use a mesh api, bind it",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"Mesh"},static:!1,readonly:!1,defaultValue:"..."},{name:"physics",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1},{name:"physicsShape",visibility:"public",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"const",type:"number",value:0,text:"PhysicsShapeType.SPHERE"},{kind:"const",type:"number",value:1,text:"PhysicsShapeType.CAPSULE"},{kind:"const",type:"number",value:2,text:"PhysicsShapeType.CYLINDER"},{kind:"const",type:"number",value:3,text:"PhysicsShapeType.BOX"},{kind:"const",type:"number",value:4,text:"PhysicsShapeType.CONVEX_HULL"},{kind:"const",type:"number",value:5,text:"PhysicsShapeType.CONTAINER"},{kind:"const",type:"number",value:6,text:"PhysicsShapeType.MESH"},{kind:"const",type:"number",value:7,text:"PhysicsShapeType.HEIGHTFIELD"},{kind:"type",type:"object",text:"PhysicsShape"}],text:"PhysicsShapeType.SPHERE | PhysicsShapeType.CAPSULE | PhysicsShapeType.CYLINDER | PhysicsShapeType.BOX | PhysicsShapeType.CONVEX_HULL | PhysicsShapeType.CONTAINER | PhysicsShapeType.MESH | PhysicsShapeType.HEIGHTFIELD | PhysicsShape"},static:!1,readonly:!1,defaultValue:"PhysicsShapeType.SPHERE"},{name:"physicsOptions",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"PhysicsAggregateParameters"},static:!1,readonly:!1},{name:"position",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"rotation",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"scaling",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"force",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"impulse",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"onCollision",visibility:"public",keywords:[],kind:"let",type:{kind:"function",text:"(eventData: IPhysicsCollisionEvent, eventState: EventState) => void"},static:!1,readonly:!1},{name:"onCollisionOnce",visibility:"public",keywords:[],kind:"let",type:{kind:"function",text:"(eventData: IPhysicsCollisionEvent, eventState: EventState) => void"},static:!1,readonly:!1}],name:"Sphere.svelte"};export{A as G,G as S};
