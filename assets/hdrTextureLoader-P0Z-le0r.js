import"./create-runtime-stories-DQMLDbyL.js";import"./props-CDwtXEPn.js";import"./index-client-0IVJ1HVs.js";import"./iframe-Cn89D-On.js";import"../sb-preview/runtime.js";import"./index-D-8MO0q_.js";import"./index-BHYIh-Xd.js";import"./_commonjsHelpers-Cpj98o6Y.js";function A(t,e){return e>1023?t*Math.pow(2,1023)*Math.pow(2,e-1023):e<-1074?t*Math.pow(2,-1074)*Math.pow(2,e+1074):t*Math.pow(2,e)}function R(t,e,n,i,r,l){r>0?(r=A(1,r-136),t[l+0]=e*r,t[l+1]=n*r,t[l+2]=i*r):(t[l+0]=0,t[l+1]=0,t[l+2]=0)}function g(t,e){let n="",i="";for(let r=e;r<t.length-e&&(i=String.fromCharCode(t[r]),i!=`
`);r++)n+=i;return n}function D(t){let e=0,n=0,i=g(t,0);if(i[0]!="#"||i[1]!="?")throw"Bad HDR Format.";let r=!1,l=!1,s=0;do s+=i.length+1,i=g(t,s),i=="FORMAT=32-bit_rle_rgbe"?l=!0:i.length==0&&(r=!0);while(!r);if(!l)throw"HDR Bad header format, unsupported FORMAT";s+=i.length+1,i=g(t,s);const o=/^-Y (.*) \+X (.*)$/g.exec(i);if(!o||o.length<3)throw"HDR Bad header format, no size";if(n=parseInt(o[2]),e=parseInt(o[1]),n<8||n>32767)throw"HDR Bad header format, unsupported size";return s+=i.length+1,{height:e,width:n,dataPosition:s}}function b(t,e){return _(t,e)}function _(t,e){let n=e.height;const i=e.width;let r,l,s,c,o,a=e.dataPosition,f=0,d=0,h=0;const m=new ArrayBuffer(i*4),w=new Uint8Array(m),B=new ArrayBuffer(e.width*e.height*4*3),u=new Float32Array(B);for(;n>0;){if(r=t[a++],l=t[a++],s=t[a++],c=t[a++],r!=2||l!=2||s&128||e.width<8||e.width>32767)return H(t,e);if((s<<8|c)!=i)throw"HDR Bad header format, wrong scan line width";for(f=0,h=0;h<4;h++)for(d=(h+1)*i;f<d;)if(r=t[a++],l=t[a++],r>128){if(o=r-128,o==0||o>d-f)throw"HDR Bad Format, bad scanline data (run)";for(;o-- >0;)w[f++]=l}else{if(o=r,o==0||o>d-f)throw"HDR Bad Format, bad scanline data (non-run)";if(w[f++]=l,--o>0)for(let p=0;p<o;p++)w[f++]=t[a++]}for(h=0;h<i;h++)r=w[h],l=w[h+i],s=w[h+2*i],c=w[h+3*i],R(u,r,l,s,c,(e.height-n)*i*3+h*3);n--}return u}function H(t,e){let n=e.height;const i=e.width;let r,l,s,c,o,a=e.dataPosition;const f=new ArrayBuffer(e.width*e.height*4*3),d=new Float32Array(f);for(;n>0;){for(o=0;o<e.width;o++)r=t[a++],l=t[a++],s=t[a++],c=t[a++],R(d,r,l,s,c,(e.height-n)*i*3+o*3);n--}return d}class z{constructor(){this.supportCascades=!1}loadCubeData(){throw".hdr not supported in Cube."}loadData(e,n,i){const r=new Uint8Array(e.buffer,e.byteOffset,e.byteLength),l=D(r),s=b(r,l),c=l.width*l.height,o=new Float32Array(c*4);for(let a=0;a<c;a+=1)o[a*4]=s[a*3],o[a*4+1]=s[a*3+1],o[a*4+2]=s[a*3+2],o[a*4+3]=1;i(l.width,l.height,n.generateMipMaps,!1,()=>{const a=n.getEngine();n.type=1,n.format=5,n._gammaSpace=!1,a._uploadDataToTextureDirectly(n,o)})}}export{z as _HDRTextureLoader};
