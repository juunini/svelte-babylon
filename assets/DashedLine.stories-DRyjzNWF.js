const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./color.vertex-BlamSl9U.js","./create-runtime-stories-BdDSBu7q.js","./props-CDwtXEPn.js","./index-client-0IVJ1HVs.js","./iframe-oeH-Nnzw.js","./index-D-8MO0q_.js","./index-BHYIh-Xd.js","./_commonjsHelpers-Cpj98o6Y.js","./vertexColorMixing-Bi90cTBU.js","./instancesVertex-CcTJgPAT.js","./color.fragment-DZ7N_ePF.js","./fogFragment-DXPZOjvC.js","./color.vertex-F5hpfxoD.js","./vertexColorMixing-CwBoPRIZ.js","./instancesVertex-TehuQMTF.js","./color.fragment-CXYDe3Ri.js","./fogFragment-DMvBO2ja.js"])))=>i.map(i=>d[i]);
import{p as B,s as N,r as $,i as H,a as O,t as j}from"./props-CDwtXEPn.js";import{p as F,a as K,f as G,g as U,n as X,s as T,d as Y}from"./index-client-0IVJ1HVs.js";import{M as w,G as E,m as q,J as W,K as C,N as Z,O as S,t as z,V as v,o as J,Q,j as ee,c as te,d as se,C as ne,E as ie,S as ae,F as re,H as oe}from"./create-runtime-stories-BdDSBu7q.js";import{_ as k}from"./iframe-oeH-Nnzw.js";import"./index-D-8MO0q_.js";import"./index-BHYIh-Xd.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"../sb-preview/runtime.js";w._LinesMeshParser=(l,e)=>_.Parse(l,e);class _ extends w{_isShaderMaterial(e){return e.getClassName()==="ShaderMaterial"}constructor(e,i=null,t=null,s=null,c,p,a,b){super(e,i,t,s,c),this.useVertexColor=p,this.useVertexAlpha=a,this.color=new E(1,1,1),this.alpha=1,this._shaderLanguage=0,s&&(this.color=s.color.clone(),this.alpha=s.alpha,this.useVertexColor=s.useVertexColor,this.useVertexAlpha=s.useVertexAlpha),this.intersectionThreshold=.1;const m=[],n={attributes:[S.PositionKind],uniforms:["world","viewProjection"],needAlphaBlending:!0,defines:m,useClipPlane:null,shaderLanguage:0};a?n.defines.push("#define VERTEXALPHA"):n.needAlphaBlending=!1,p?(n.defines.push("#define VERTEXCOLOR"),n.attributes.push(S.ColorKind)):(n.uniforms.push("color"),this._color4=new q),b?this.material=b:(this.getScene().getEngine().isWebGPU&&!_.ForceGLSL&&(this._shaderLanguage=1),n.shaderLanguage=this._shaderLanguage,n.extraInitializationsAsync=async()=>{this._shaderLanguage===1?await Promise.all([k(()=>import("./color.vertex-BlamSl9U.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9]),import.meta.url),k(()=>import("./color.fragment-DZ7N_ePF.js"),__vite__mapDeps([10,1,2,3,4,5,6,7,11]),import.meta.url)]):await Promise.all([k(()=>import("./color.vertex-F5hpfxoD.js"),__vite__mapDeps([12,1,2,3,4,5,6,7,13,14]),import.meta.url),k(()=>import("./color.fragment-CXYDe3Ri.js"),__vite__mapDeps([15,1,2,3,4,5,6,7,16]),import.meta.url)])},this.material=new W("colorShader",this.getScene(),"color",n,!1),this.material.doNotSerialize=!0)}isReady(){return this._lineMaterial.isReady(this,!!this._userInstancedBuffersStorage||this.hasThinInstances)?super.isReady():!1}getClassName(){return"LinesMesh"}get material(){return this._lineMaterial}set material(e){this._lineMaterial=e,this._lineMaterial.fillMode=C.LineListDrawMode}get checkCollisions(){return!1}set checkCollisions(e){}_bind(e,i){if(!this._geometry)return this;const t=this.isUnIndexed?null:this._geometry.getIndexBuffer();if(!this._userInstancedBuffersStorage||this.hasThinInstances?this._geometry._bind(i,t):this._geometry._bind(i,t,this._userInstancedBuffersStorage.vertexBuffers,this._userInstancedBuffersStorage.vertexArrayObjects),!this.useVertexColor&&this._isShaderMaterial(this._lineMaterial)){const{r:s,g:c,b:p}=this.color;this._color4.set(s,c,p,this.alpha),this._lineMaterial.setColor4("color",this._color4)}return this}_draw(e,i,t){if(!this._geometry||!this._geometry.getVertexBuffers()||!this._unIndexed&&!this._geometry.getIndexBuffer())return this;const s=this.getScene().getEngine();return this._unIndexed?s.drawArraysType(C.LineListDrawMode,e.verticesStart,e.verticesCount,t):s.drawElementsType(C.LineListDrawMode,e.indexStart,e.indexCount,t),this}dispose(e,i=!1,t){t||this._lineMaterial.dispose(!1,!1,!0),super.dispose(e)}clone(e,i=null,t){return new _(e,this.getScene(),i,this,t)}createInstance(e){const i=new le(e,this);if(this.instancedBuffers){i.instancedBuffers={};for(const t in this.instancedBuffers)i.instancedBuffers[t]=this.instancedBuffers[t]}return i}serialize(e){super.serialize(e),e.color=this.color.asArray(),e.alpha=this.alpha}static Parse(e,i){const t=new _(e.name,i);return t.color=E.FromArray(e.color),t.alpha=e.alpha,t}}_.ForceGLSL=!1;class le extends Z{constructor(e,i){super(e,i),this.intersectionThreshold=i.intersectionThreshold}getClassName(){return"InstancedLinesMesh"}}function V(l){const e=[],i=[],t=l.lines,s=l.colors,c=[];let p=0;for(let b=0;b<t.length;b++){const m=t[b];for(let n=0;n<m.length;n++){const{x:r,y:h,z:y}=m[n];if(i.push(r,h,y),s){const o=s[b],{r:f,g:d,b:x,a:g}=o[n];c.push(f,d,x,g)}n>0&&(e.push(p-1),e.push(p)),p++}}const a=new z;return a.indices=e,a.positions=i,s&&(a.colors=c),a}function M(l){const e=l.dashSize||3,i=l.gapSize||1,t=l.dashNb||200,s=l.points,c=[],p=[],a=v.Zero();let b=0,m=0,n=0,r=0,h=0,y=0,o=0;for(o=0;o<s.length-1;o++)s[o+1].subtractToRef(s[o],a),b+=a.length();for(n=b/t,r=e*n/(e+i),o=0;o<s.length-1;o++){s[o+1].subtractToRef(s[o],a),m=Math.floor(a.length()/n),a.normalize();for(let d=0;d<m;d++)h=n*d,c.push(s[o].x+h*a.x,s[o].y+h*a.y,s[o].z+h*a.z),c.push(s[o].x+(h+r)*a.x,s[o].y+(h+r)*a.y,s[o].z+(h+r)*a.z),p.push(y,y+1),y+=2}const f=new z;return f.positions=c,f.indices=p,f}function ce(l,e,i=null){const t=e.instance,s=e.lines,c=e.colors;if(t){const m=t.getVerticesData(S.PositionKind);let n,r;c&&(n=t.getVerticesData(S.ColorKind));let h=0,y=0;for(let o=0;o<s.length;o++){const f=s[o];for(let d=0;d<f.length;d++)m[h]=f[d].x,m[h+1]=f[d].y,m[h+2]=f[d].z,c&&n&&(r=c[o],n[y]=r[d].r,n[y+1]=r[d].g,n[y+2]=r[d].b,n[y+3]=r[d].a,y+=4),h+=3}return t.updateVerticesData(S.PositionKind,m,!1,!1),c&&n&&t.updateVerticesData(S.ColorKind,n,!1,!1),t.refreshBoundingInfo(),t}const p=!!c,a=new _(l,i,null,void 0,void 0,p,e.useVertexAlpha,e.material);return V(e).applyToMesh(a,e.updatable),a}function de(l,e,i=null){const t=e.colors?[e.colors]:null;return ce(l,{lines:[e.points],updatable:e.updatable,instance:e.instance,colors:t,useVertexAlpha:e.useVertexAlpha,material:e.material},i)}function I(l,e,i=null){const t=e.points,s=e.instance,c=e.gapSize||1,p=e.dashSize||3;if(s){const m=n=>{const r=v.Zero(),h=n.length/6;let y=0,o=0,f=0,d=0,x=0,g=0,u=0,L=0;for(u=0;u<t.length-1;u++)t[u+1].subtractToRef(t[u],r),y+=r.length();f=y/h;const D=s._creationDataStorage.dashSize,R=s._creationDataStorage.gapSize;for(d=D*f/(D+R),u=0;u<t.length-1;u++)for(t[u+1].subtractToRef(t[u],r),o=Math.floor(r.length()/f),r.normalize(),L=0;L<o&&g<n.length;)x=f*L,n[g]=t[u].x+x*r.x,n[g+1]=t[u].y+x*r.y,n[g+2]=t[u].z+x*r.z,n[g+3]=t[u].x+(x+d)*r.x,n[g+4]=t[u].y+(x+d)*r.y,n[g+5]=t[u].z+(x+d)*r.z,g+=6,L++;for(;g<n.length;)n[g]=t[u].x,n[g+1]=t[u].y,n[g+2]=t[u].z,g+=3};return(e.dashNb||e.dashSize||e.gapSize||e.useVertexAlpha||e.material)&&J.Warn("You have used an option other than points with the instance option. Please be aware that these other options will be ignored."),s.updateMeshPositions(m,!1),s}const a=new _(l,i,null,void 0,void 0,void 0,e.useVertexAlpha,e.material);return M(e).applyToMesh(a,e.updatable),a._creationDataStorage=new Q,a._creationDataStorage.dashSize=p,a._creationDataStorage.gapSize=c,a}z.CreateLineSystem=V;z.CreateDashedLines=M;w.CreateLines=(l,e,i=null,t=!1,s=null)=>de(l,{points:e,updatable:t,instance:s},i);w.CreateDashedLines=(l,e,i,t,s,c=null,p,a)=>I(l,{points:e,dashSize:i,gapSize:t,dashNb:s,updatable:p,instance:a},c);function P(l,e){let i=B(e,"mesh",15),t=$(e,["$$slots","$$events","$$legacy","mesh"]);ee(l,N({createMeshFunction:I},()=>t,{get mesh(){return i()},set mesh(s){i(s)}}))}P.__docgen={data:[{name:"mesh",visibility:"public",description:"if you want to use a mesh api, bind it",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"LinesMesh"},static:!1,readonly:!1,defaultValue:"..."},{name:"options",visibility:"public",keywords:[{name:"required",description:""}],kind:"let",type:{kind:"type",type:"object",text:"{ dashNb?: number | undefined; dashSize?: number | undefined; gapSize?: number | undefined; instance?: LinesMesh | undefined; material?: Material | undefined; points: Vector3[]; updatable?: boolean | undefined; useVertexAlpha?: boolean | undefined; }"},static:!1,readonly:!1},{name:"scene",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"Scene"},static:!1,readonly:!1},{name:"children",visibility:"public",keywords:[],kind:"let",type:{kind:"function",text:"Snippet<[]>"},static:!1,readonly:!1},{name:"physics",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1},{name:"physicsShape",visibility:"public",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"const",type:"number",value:0,text:"PhysicsShapeType.SPHERE"},{kind:"const",type:"number",value:1,text:"PhysicsShapeType.CAPSULE"},{kind:"const",type:"number",value:2,text:"PhysicsShapeType.CYLINDER"},{kind:"const",type:"number",value:3,text:"PhysicsShapeType.BOX"},{kind:"const",type:"number",value:4,text:"PhysicsShapeType.CONVEX_HULL"},{kind:"const",type:"number",value:5,text:"PhysicsShapeType.CONTAINER"},{kind:"const",type:"number",value:6,text:"PhysicsShapeType.MESH"},{kind:"const",type:"number",value:7,text:"PhysicsShapeType.HEIGHTFIELD"},{kind:"type",type:"object",text:"PhysicsShape"}],text:"PhysicsShapeType.SPHERE | PhysicsShapeType.CAPSULE | PhysicsShapeType.CYLINDER | PhysicsShapeType.BOX | PhysicsShapeType.CONVEX_HULL | PhysicsShapeType.CONTAINER | PhysicsShapeType.MESH | PhysicsShapeType.HEIGHTFIELD | PhysicsShape"},static:!1,readonly:!1},{name:"physicsOptions",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"PhysicsAggregateParameters"},static:!1,readonly:!1},{name:"position",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"rotation",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"scaling",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"force",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1},{name:"impulse",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ x: number; y: number; z: number; }"},static:!1,readonly:!1}],name:"DashedLine.svelte"};const he={title:"mesh/DashedLine",tags:["autodocs"],component:P},{Story:ue}=se();var pe=j("<!> <!> <!>",1);function A(l,e){F(e,!1),H(),ue(l,{name:"Docs",args:{options:{dashNb:20,dashSize:4,gapSize:4,instance:void 0,material:void 0,points:[{x:-2,y:4,z:-8},{x:2,y:4,z:-8}],updatable:void 0,useVertexAlpha:void 0},position:{x:0,y:0,z:0},rotation:{x:0,y:0,z:0},scaling:{x:1,y:1,z:1}},children:(t,s=X)=>{ne(t,{style:"width: 100%;",children:(c,p)=>{ie(c,{children:(a,b)=>{ae(a,{children:(m,n)=>{var r=pe(),h=G(r);re(h,{position:new v(0,5,-10)});var y=T(h,2);oe(y,{direction:new v(0,1,0),intensity:.7});var o=T(y,2),f=Y(()=>{var d;return{...s().options,points:((d=s().options)==null?void 0:d.points.map(x=>new v(x.x,x.y,x.z)))||[]}});P(o,{get options(){return U(f)},get position(){return s().position},get rotation(){return s().rotation},get scaling(){return s().scaling}}),O(m,r)},$$slots:{default:!0}})},$$slots:{default:!0}})},$$slots:{default:!0}})},$$slots:{default:!0},parameters:{__svelteCsf:{rawCode:`<Canvas style="width: 100%;">
  <Engine>
    <Scene>
      <FreeCamera position={new Vector3(0, 5, -10)} />
      <HemisphericLight direction={new Vector3(0, 1, 0)} intensity={0.7} />
      <DashedLine
        options={{
          ...args.options,
          points:
            args.options?.points.map((point) => new Vector3(point.x, point.y, point.z)) || []
        }}
        position={args.position}
        rotation={args.rotation}
        scaling={args.scaling}
      />
    </Scene>
  </Engine>
</Canvas>`}}}),K()}A.__docgen={version:3,name:"DashedLine.stories.svelte",data:[],computed:[],methods:[],components:[],description:null,keywords:[],events:[],slots:[],refs:[]};const ye=te(A,he),Le=["Docs"],ke=ye.Docs;export{ke as Docs,Le as __namedExportsOrder,he as default};
